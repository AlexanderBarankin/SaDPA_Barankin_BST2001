<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="5e46628a-cf23-444d-8b70-b94d29e0c3e1" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/.idea/.gitignore" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/LabWork2.iml" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/.idea/LabWork2.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/inspectionProfiles/profiles_settings.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/.idea/inspectionProfiles/profiles_settings.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/.idea/misc.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/.idea/modules.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/.idea/vcs.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/LabWork2Tasks.md" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/LabWork2Tasks.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Node.py" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/Node.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Task1.py" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/Task1.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Task2.py" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/Task2.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Task3.py" beforeDir="false" afterPath="$PROJECT_DIR$/../Lab2_БСТ2001_Баранкин_АВ/Task3.py" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="25ayCjOe7tIm5G0K9bsoTaibBx5" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/Task2.py" />
  </component>
  <component name="RunManager" selected="Python.Task 2">
    <configuration name="Task 1" type="PythonConfigurationType" factoryName="Python">
      <module name="LabWork2" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Task1.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Task 2" type="PythonConfigurationType" factoryName="Python">
      <module name="LabWork2" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="C:\Users\yaya1\OneDrive\Документы\GitHub\SaDPA_Barankin_BST2001\LabWork2\venv\Scripts\python.exe" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="false" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Task2.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <configuration name="Task 3" type="PythonConfigurationType" factoryName="Python">
      <module name="LabWork2" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="C:\Users\yaya1\OneDrive\Документы\GitHub\SaDPA_Barankin_BST2001\LabWork2\venv\Scripts\python.exe" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="false" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Task3.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Python.Task 3" />
      <item itemvalue="Python.Task 2" />
      <item itemvalue="Python.Task 1" />
    </list>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="5e46628a-cf23-444d-8b70-b94d29e0c3e1" name="Changes" comment="" />
      <created>1645779366290</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1645779366290</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="XDebuggerManager">
    <watches-manager>
      <configuration name="PythonConfigurationType">
        <watch expression="# Воспользуемся поиском через бинарное дерево             root = None             for i in range(len(array)):                 root = Node.insert(root, array[i], i)              print(&quot;\nПоиск через бинарное дерево: &quot;, end=' ')             Node.inorder(root)              # Дальше пользователю будет предложено добавить или удалить какой-либо элемент             answerAdd = input('\nХотите ли вы добавить элемент в исходный массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerAdd == &quot;да&quot;:                 insValue = int(input(&quot;\nВведите новый элемент: &quot;))                 root = Node.insert(root, insValue, len(array))              answerDel = input(                 '\nХотите ли вы удалить элемент из исходного массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerDel == &quot;да&quot;:                 delValue = int(input(&quot;\nВведите элемент, который необходимо удалить: &quot;))                 root = Node.deleteNode(root, delValue, len(array))              print(&quot;\nВывод отсортированного массива: &quot;, end=' ')             Node.inorder(root)              # Ввод элемента, который необходимо будет найти             value = int(input(&quot;\nВведите элемент, который необходимо найти = &quot;))              # Функция поиска элемента в бинарном дереве             def treeSearch(root, value):                 if root is None:                     raise ValueError()                  if value &gt; root.data:                     return treeSearch(root.right, value)                 elif value &lt; root.data:                     return treeSearch(root.left, value)                 else:                     print(root.index)              # Вызов функции поиска в бинарном дереве             start_time = time.time()             treeSearch(root, value)             print(f&quot;{time.time() - start_time} секунд&quot;)" language="Python" />
        <watch expression="# Воспользуемся поиском через бинарное дерево             root = None             for i in range(len(array)):                 root = Node.insert(root, array[i], i)              print(&quot;\nПоиск через бинарное дерево: &quot;, end=' ')             Node.inorder(root)              # Дальше пользователю будет предложено добавить или удалить какой-либо элемент             answerAdd = input('\nХотите ли вы добавить элемент в исходный массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerAdd == &quot;да&quot;:                 insValue = int(input(&quot;\nВведите новый элемент: &quot;))                 root = Node.insert(root, insValue, len(array))              answerDel = input(                 '\nХотите ли вы удалить элемент из исходного массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerDel == &quot;да&quot;:                 delValue = int(input(&quot;\nВведите элемент, который необходимо удалить: &quot;))                 root = Node.deleteNode(root, delValue, len(array))              print(&quot;\nВывод отсортированного массива: &quot;, end=' ')             Node.inorder(root)              # Ввод элемента, который необходимо будет найти             value = int(input(&quot;\nВведите элемент, который необходимо найти = &quot;))              # Функция поиска элемента в бинарном дереве             def treeSearch(root, value):                 if root is None:                     raise ValueError()                  if value &gt; root.data:                     return treeSearch(root.right, value)                 elif value &lt; root.data:                     return treeSearch(root.left, value)                 else:                     print(root.index)              # Вызов функции поиска в бинарном дереве             start_time = time.time()             treeSearch(root, value)             print(f&quot;{time.time() - start_time} секунд&quot;)" language="Python" />
        <watch expression="# Воспользуемся поиском через бинарное дерево             root = None             for i in range(len(array)):                 root = Node.insert(root, array[i], i)              print(&quot;\nПоиск через бинарное дерево: &quot;, end=' ')             Node.inorder(root)              # Дальше пользователю будет предложено добавить или удалить какой-либо элемент             answerAdd = input('\nХотите ли вы добавить элемент в исходный массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerAdd == &quot;да&quot;:                 insValue = int(input(&quot;\nВведите новый элемент: &quot;))                 root = Node.insert(root, insValue, len(array))              answerDel = input(                 '\nХотите ли вы удалить элемент из исходного массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerDel == &quot;да&quot;:                 delValue = int(input(&quot;\nВведите элемент, который необходимо удалить: &quot;))                 root = Node.deleteNode(root, delValue, len(array))              print(&quot;\nВывод отсортированного массива: &quot;, end=' ')             Node.inorder(root)              # Ввод элемента, который необходимо будет найти             value = int(input(&quot;\nВведите элемент, который необходимо найти = &quot;))              # Функция поиска элемента в бинарном дереве             def treeSearch(root, value):                 if root is None:                     raise ValueError()                  if value &gt; root.data:                     return treeSearch(root.right, value)                 elif value &lt; root.data:                     return treeSearch(root.left, value)                 else:                     print(root.index)              # Вызов функции поиска в бинарном дереве             start_time = time.time()             treeSearch(root, value)             print(f&quot;{time.time() - start_time} секунд&quot;)" language="Python" />
        <watch expression="# Воспользуемся поиском через бинарное дерево             root = None             for i in range(len(array)):                 root = Node.insert(root, array[i], i)              print(&quot;\nПоиск через бинарное дерево: &quot;, end=' ')             Node.inorder(root)              # Дальше пользователю будет предложено добавить или удалить какой-либо элемент             answerAdd = input('\nХотите ли вы добавить элемент в исходный массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerAdd == &quot;да&quot;:                 insValue = int(input(&quot;\nВведите новый элемент: &quot;))                 root = Node.insert(root, insValue, len(array))              answerDel = input(                 '\nХотите ли вы удалить элемент из исходного массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerDel == &quot;да&quot;:                 delValue = int(input(&quot;\nВведите элемент, который необходимо удалить: &quot;))                 root = Node.deleteNode(root, delValue, len(array))              print(&quot;\nВывод отсортированного массива: &quot;, end=' ')             Node.inorder(root)              # Ввод элемента, который необходимо будет найти             value = int(input(&quot;\nВведите элемент, который необходимо найти = &quot;))              # Функция поиска элемента в бинарном дереве             def treeSearch(root, value):                 if root is None:                     raise ValueError()                  if value &gt; root.data:                     return treeSearch(root.right, value)                 elif value &lt; root.data:                     return treeSearch(root.left, value)                 else:                     print(root.index)              # Вызов функции поиска в бинарном дереве             start_time = time.time()             treeSearch(root, value)             print(f&quot;{time.time() - start_time} секунд&quot;)" language="Python" />
        <watch expression="# Воспользуемся поиском через бинарное дерево             root = None             for i in range(len(array)):                 root = Node.insert(root, array[i], i)              print(&quot;\nПоиск через бинарное дерево: &quot;, end=' ')             Node.inorder(root)              # Дальше пользователю будет предложено добавить или удалить какой-либо элемент             answerAdd = input('\nХотите ли вы добавить элемент в исходный массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerAdd == &quot;да&quot;:                 insValue = int(input(&quot;\nВведите новый элемент: &quot;))                 root = Node.insert(root, insValue, len(array))              answerDel = input(                 '\nХотите ли вы удалить элемент из исходного массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerDel == &quot;да&quot;:                 delValue = int(input(&quot;\nВведите элемент, который необходимо удалить: &quot;))                 root = Node.deleteNode(root, delValue, len(array))              print(&quot;\nВывод отсортированного массива: &quot;, end=' ')             Node.inorder(root)              # Ввод элемента, который необходимо будет найти             value = int(input(&quot;\nВведите элемент, который необходимо найти = &quot;))              # Функция поиска элемента в бинарном дереве             def treeSearch(root, value):                 if root is None:                     raise ValueError()                  if value &gt; root.data:                     return treeSearch(root.right, value)                 elif value &lt; root.data:                     return treeSearch(root.left, value)                 else:                     print(root.index)              # Вызов функции поиска в бинарном дереве             start_time = time.time()             treeSearch(root, value)             print(f&quot;{time.time() - start_time} секунд&quot;)" language="Python" />
        <watch expression="# Воспользуемся поиском через бинарное дерево             root = None             for i in range(len(array)):                 root = Node.insert(root, array[i], i)              print(&quot;\nПоиск через бинарное дерево: &quot;, end=' ')             Node.inorder(root)              # Дальше пользователю будет предложено добавить или удалить какой-либо элемент             answerAdd = input('\nХотите ли вы добавить элемент в исходный массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerAdd == &quot;да&quot;:                 insValue = int(input(&quot;\nВведите новый элемент: &quot;))                 root = Node.insert(root, insValue, len(array))              answerDel = input(                 '\nХотите ли вы удалить элемент из исходного массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerDel == &quot;да&quot;:                 delValue = int(input(&quot;\nВведите элемент, который необходимо удалить: &quot;))                 root = Node.deleteNode(root, delValue, len(array))              print(&quot;\nВывод отсортированного массива: &quot;, end=' ')             Node.inorder(root)              # Ввод элемента, который необходимо будет найти             value = int(input(&quot;\nВведите элемент, который необходимо найти = &quot;))              # Функция поиска элемента в бинарном дереве             def treeSearch(root, value):                 if root is None:                     raise ValueError()                  if value &gt; root.data:                     return treeSearch(root.right, value)                 elif value &lt; root.data:                     return treeSearch(root.left, value)                 else:                     print(root.index)              # Вызов функции поиска в бинарном дереве             start_time = time.time()             treeSearch(root, value)             print(f&quot;{time.time() - start_time} секунд&quot;)" language="Python" />
        <watch expression="# Воспользуемся поиском через бинарное дерево             root = None             for i in range(len(array)):                 root = Node.insert(root, array[i], i)              print(&quot;\nПоиск через бинарное дерево: &quot;, end=' ')             Node.inorder(root)              # Дальше пользователю будет предложено добавить или удалить какой-либо элемент             answerAdd = input('\nХотите ли вы добавить элемент в исходный массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerAdd == &quot;да&quot;:                 insValue = int(input(&quot;\nВведите новый элемент: &quot;))                 root = Node.insert(root, insValue, len(array))              answerDel = input(                 '\nХотите ли вы удалить элемент из исходного массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerDel == &quot;да&quot;:                 delValue = int(input(&quot;\nВведите элемент, который необходимо удалить: &quot;))                 root = Node.deleteNode(root, delValue, len(array))              print(&quot;\nВывод отсортированного массива: &quot;, end=' ')             Node.inorder(root)              # Ввод элемента, который необходимо будет найти             value = int(input(&quot;\nВведите элемент, который необходимо найти = &quot;))              # Функция поиска элемента в бинарном дереве             def treeSearch(root, value):                 if root is None:                     raise ValueError()                  if value &gt; root.data:                     return treeSearch(root.right, value)                 elif value &lt; root.data:                     return treeSearch(root.left, value)                 else:                     print(root.index)              # Вызов функции поиска в бинарном дереве             start_time = time.time()             treeSearch(root, value)             print(f&quot;{time.time() - start_time} секунд&quot;)" language="Python" />
        <watch expression="# Воспользуемся поиском через бинарное дерево             root = None             for i in range(len(array)):                 root = Node.insert(root, array[i], i)              print(&quot;\nПоиск через бинарное дерево: &quot;, end=' ')             Node.inorder(root)              # Дальше пользователю будет предложено добавить или удалить какой-либо элемент             answerAdd = input('\nХотите ли вы добавить элемент в исходный массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerAdd == &quot;да&quot;:                 insValue = int(input(&quot;\nВведите новый элемент: &quot;))                 root = Node.insert(root, insValue, len(array))              answerDel = input(                 '\nХотите ли вы удалить элемент из исходного массив? Введите &quot;да&quot; или &quot;нет&quot;. Ваш ответ:  ')             if answerDel == &quot;да&quot;:                 delValue = int(input(&quot;\nВведите элемент, который необходимо удалить: &quot;))                 root = Node.deleteNode(root, delValue, len(array))              print(&quot;\nВывод отсортированного массива: &quot;, end=' ')             Node.inorder(root)              # Ввод элемента, который необходимо будет найти             value = int(input(&quot;\nВведите элемент, который необходимо найти = &quot;))              # Функция поиска элемента в бинарном дереве             def treeSearch(root, value):                 if root is None:                     raise ValueError()                  if value &gt; root.data:                     return treeSearch(root.right, value)                 elif value &lt; root.data:                     return treeSearch(root.left, value)                 else:                     print(root.index)              # Вызов функции поиска в бинарном дереве             start_time = time.time()             treeSearch(root, value)             print(f&quot;{time.time() - start_time} секунд&quot;)" language="Python" />
      </configuration>
    </watches-manager>
  </component>
</project>